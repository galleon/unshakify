[project]
name = "unshakify"
version = "0.2.0"
description = "AI-based video stabilization with Fast-Stab integration and Mac M3 optimization"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Galleon", email = "your.email@example.com"},
]
keywords = ["video", "stabilization", "computer-vision", "ai", "opencv", "fast-stab", "mac-m3"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "opencv-python-headless>=4.8.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
# Development dependencies (optimized for uv)
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.12.11",
    "mypy>=1.0.0",
]

# Mac M3 (Apple Silicon) optimized dependencies
mac-m3 = [
    "opencv-contrib-python-headless>=4.8.0",  # Additional OpenCV modules
]

# Optional multimedia support
multimedia = [
    "ffmpeg-python>=0.2.0",
]

# Full development environment (includes all tools)
full = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.11",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

# Performance testing and benchmarking
benchmark = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
]

# All optional dependencies combined
all = [
    "opencv-contrib-python-headless>=4.8.0",
    "ffmpeg-python>=0.2.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.11",
    "mypy>=1.0.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "PIE", # flake8-pie
]

ignore = [
    "UP035", # Import from collections.abc (can be noisy for older code)
    "E501",  # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"main.py" = ["I001"] # Skip import sorting for demo script
"tests/*" = ["S101", "D"] # Allow assert statements and missing docstrings in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["unshakify"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# UV-specific configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.12.11",
    "mypy>=1.0.0",
]
# Prefer binary wheels for faster installation
index-url = "https://pypi.org/simple/"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
    "mac_m3: marks tests specific to Mac M3 (Apple Silicon)",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2",
    "cv2.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[project.urls]
Homepage = "https://github.com/galleon/unshakify"
Repository = "https://github.com/galleon/unshakify.git"
Issues = "https://github.com/galleon/unshakify/issues"
Documentation = "https://github.com/galleon/unshakify#readme"

[project.scripts]
unshakify = "unshakify.main:main"
unshakify-fast = "unshakify.fast_stabilizer:main"
